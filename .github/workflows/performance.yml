name: Performance Tests

on:
  push:
    branches: [main]
    paths:
      - "src/**"
  pull_request:
    branches: [main]
    paths:
      - "src/**"
  workflow_dispatch:

jobs:
  performance:
    name: Performance Benchmarks
    runs-on: ubuntu-24.04

    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: npm run build

      - name: Install Playwright
        run: npx playwright install chromium

      - name: Create performance test
        run: |
          mkdir -p perf-tests

          cat > perf-tests/benchmark.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>CSS if() Polyfill Performance Test</title>
              <style>
                  /* Test styles with various if() conditions */
                  .test-element-1 { color: if(media(min-width: 768px): blue; else: red); }
                  .test-element-2 { background: if(supports(display: grid): white; else: gray); }
                  .test-element-3 { font-size: if(style(--large): 18px; else: 14px); }
                  .test-element-4 { padding: if(media(max-width: 480px): 10px; else: 20px); }
                  .test-element-5 { margin: if(media(min-width: 1024px): 30px; else: 15px); }

                  /* Multiple conditions */
                  .test-complex {
                      color: if(media(min-width: 768px): blue; supports(color: red): red; else: black);
                      background: if(media(orientation: landscape): white; else: lightgray);
                  }
              </style>
          </head>
          <body>
              <div class="test-element-1">Test 1</div>
              <div class="test-element-2">Test 2</div>
              <div class="test-element-3">Test 3</div>
              <div class="test-element-4">Test 4</div>
              <div class="test-element-5">Test 5</div>
              <div class="test-complex">Complex Test</div>

              <script type="module">
                  import CSSIfPolyfill from '../packages/css-if-polyfill/dist/index.modern.js';

                  // Performance measurement
                  const startTime = performance.now();

                  CSSIfPolyfill.init({ debug: true });

                  const endTime = performance.now();
                  const initTime = endTime - startTime;

                  // Test processing time
                  const testCSS = `
                      .perf-test {
                          color: if(media(min-width: 768px): blue; else: red);
                          background: if(supports(display: grid): white; else: gray);
                          font-size: if(style(--large): 18px; else: 14px);
                      }
                  `;

                  const processStart = performance.now();
                  for (let i = 0; i < 1000; i++) {
                      CSSIfPolyfill.processCSSText(testCSS);
                  }
                  const processEnd = performance.now();
                  const processTime = processEnd - processStart;

                  // Report results
                  const results = {
                      initTime: initTime,
                      processTime: processTime,
                      avgProcessTime: processTime / 1000
                  };

                  console.log('Performance Results:', results);

                  // Make results available to test runner
                  window.performanceResults = results;
              </script>
          </body>
          </html>
          EOF

          cat > perf-tests/run-benchmark.js << 'EOF'
          const { chromium } = require('playwright');
          const fs = require('node:fs');

          (async () => {
              const browser = await chromium.launch();
              const page = await browser.newPage();

              // Navigate to benchmark page
              await page.goto(`file://${__dirname}/benchmark.html`);

              // Wait for benchmark to complete
              await page.waitForFunction(() => window.performanceResults);

              // Get results
              const results = await page.evaluate(() => window.performanceResults);

              console.log('Performance Benchmark Results:');
              console.log(`Initialization time: ${results.initTime.toFixed(2)}ms`);
              console.log(`Total processing time (1000 iterations): ${results.processTime.toFixed(2)}ms`);
              console.log(`Average processing time per iteration: ${results.avgProcessTime.toFixed(4)}ms`);

              // Save results to file
              fs.writeFileSync('performance-results.json', JSON.stringify(results, null, 2));

              // Check performance thresholds
              if (results.initTime > 100) {
                  console.error('‚ùå Initialization time exceeded threshold (100ms)');
                  process.exit(1);
              }

              if (results.avgProcessTime > 1) {
                  console.error('‚ùå Average processing time exceeded threshold (1ms)');
                  process.exit(1);
              }

              console.log('‚úÖ All performance benchmarks passed');

              await browser.close();
          })();
          EOF

      - name: Run performance benchmark
        run: |
          cd perf-tests
          node run-benchmark.js

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: perf-tests/performance-results.json
          retention-days: 30

      - name: Comment performance results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('node:fs');
            const results = JSON.parse(fs.readFileSync('perf-tests/performance-results.json', 'utf8'));

            const comment = `## üöÄ Performance Benchmark Results

            | Metric | Value | Status |
            |--------|-------|--------|
            | Initialization Time | ${results.initTime.toFixed(2)}ms | ${results.initTime <= 100 ? '‚úÖ' : '‚ùå'} |
            | Avg Processing Time | ${results.avgProcessTime.toFixed(4)}ms | ${results.avgProcessTime <= 1 ? '‚úÖ' : '‚ùå'} |
            | Total Processing Time (1000x) | ${results.processTime.toFixed(2)}ms | ‚ÑπÔ∏è |

            ${results.initTime <= 100 && results.avgProcessTime <= 1 ? '‚úÖ All benchmarks passed!' : '‚ùå Some benchmarks failed - please review performance impact.'}
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
